"use client";

import { useAuth } from "@/hooks/use-auth";
import { useState, useEffect, useCallback } from "react";
import { Transaction, getTransactions } from "@/lib/transactions";
import { Account, getAccounts } from "@/lib/accounts";
import {
  RecurringTransactionWithAccount,
  getRecurringTransactions,
} from "@/lib/recurring-transactions";
import { Goal, getGoals } from "@/lib/goals";
import {
  StatisticsService,
  StatisticsSummary,
  TimePeriodFilter,
} from "@/lib/statistics";
import { StatisticsOverview } from "@/components/dashboard/statistics-overview";
import { ExportDialog } from "@/components/dashboard/export-dialog";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { 
  BarChart, 
  RefreshCw, 
  FileDown, 
  PiggyBank, 
  Calendar, 
  Wallet,
  ChevronRight,
  ArrowLeftRight
} from "lucide-react";
import { AccountsList } from "@/components/accounts/accounts-list";
import { TransactionsCardList } from "@/components/transactions/transactions-card-list";
import { RecurringTransactionsList } from "@/components/recurring/recurring-transactions-list";
import { GoalsList } from "@/components/goals/goals-list";
import { TransferCardList } from "@/components/transfers/transfer-card-list";
import Link from "next/link";

export default function StatisticsPage() {
  const { user } = useAuth();
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [accounts, setAccounts] = useState<Account[]>([]);
  const [recurringTransactions, setRecurringTransactions] = useState<
    RecurringTransactionWithAccount[]
  >([]);
  const [goals, setGoals] = useState<Goal[]>([]);
  const [loading, setLoading] = useState(true);
  const [timePeriod, setTimePeriod] = useState<TimePeriodFilter>("monthly");
  const [summary, setSummary] = useState<StatisticsSummary | null>(null);
  const [activeTab, setActiveTab] = useState("overview");
  
  const refreshData = useCallback(async () => {
    if (user) {
      setLoading(true);
      try {
        const [
          fetchedTransactions,
          fetchedAccounts,
          fetchedRecurringTransactions,
          fetchedGoals,
        ] = await Promise.all([
          getTransactions(user.uid),
          getAccounts(user.uid),
          getRecurringTransactions(user.uid),
          getGoals(user.uid),
        ]);

        setTransactions(fetchedTransactions);
        setAccounts(fetchedAccounts);
        setRecurringTransactions(fetchedRecurringTransactions);
        setGoals(fetchedGoals);

        // Generate statistics summary
        const statisticsSummary = StatisticsService.generateSummary(
          fetchedTransactions,
          fetchedAccounts,
          fetchedRecurringTransactions,
          timePeriod
        );
        setSummary(statisticsSummary);
      } catch (error) {
        console.error("Error fetching data for statistics:", error);
      } finally {
        setLoading(false);
      }
    }
  }, [user, timePeriod]);

  useEffect(() => {
    refreshData();
  }, [refreshData]);

  // Regenerate summary when time period changes
  useEffect(() => {
    if (transactions.length > 0 || accounts.length > 0) {
      const statisticsSummary = StatisticsService.generateSummary(
        transactions,
        accounts,
        recurringTransactions,
        timePeriod
      );
      setSummary(statisticsSummary);
    }
  }, [timePeriod, transactions, accounts, recurringTransactions]);

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
          <div>
            <Skeleton className="h-8 w-64" />
            <Skeleton className="h-4 w-48 mt-2" />
          </div>
          <div className="flex flex-wrap items-center gap-2 mt-4 sm:mt-0">
            <Skeleton className="h-10 w-full sm:w-[180px]" />
            <div className="flex gap-2">
              <Skeleton className="h-10 w-10" />
              <Skeleton className="h-10 w-10" />
            </div>
          </div>
        </div>

        {/* Tabs skeleton */}
        <Skeleton className="h-10 w-full" />

        {/* Content skeleton */}
        <div className="grid gap-4 grid-cols-1">
          <Skeleton className="h-[600px]" />
        </div>
      </div>
    );
  }

  if (!summary) {
    return (
      <div className="flex items-center justify-center h-64">
        <p className="text-muted-foreground">
          No data available for statistics generation.
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header with controls */}
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
        <div>
          <h1 className="text-2xl sm:text-3xl font-bold tracking-tight font-headline">
            Financial Hub
          </h1>
          <p className="text-muted-foreground">
            Comprehensive financial overview, reports, and exports
          </p>
        </div>
        <div className="flex flex-wrap items-center gap-2">
          <Select
            value={timePeriod}
            onValueChange={(value: TimePeriodFilter) => setTimePeriod(value)}
          >
            <SelectTrigger className="w-full sm:w-[180px]">
              <SelectValue placeholder="Select time period" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="daily">Last 30 days</SelectItem>
              <SelectItem value="weekly">Last 12 weeks</SelectItem>
              <SelectItem value="monthly">Last 12 months</SelectItem>
              <SelectItem value="quarterly">Last 4 quarters</SelectItem>
              <SelectItem value="yearly">Last 3 years</SelectItem>
              <SelectItem value="all">All time</SelectItem>
            </SelectContent>
          </Select>

          <div className="flex gap-2">
            {summary && (
              <ExportDialog
                summary={summary}
                transactions={transactions}
                accounts={accounts}
                recurringTransactions={recurringTransactions}
              />
            )}
            <Button
              variant="outline"
              size="sm"
              onClick={refreshData}
              disabled={loading}
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              Refresh
            </Button>
          </div>
        </div>
      </div>

      {/* Tabs Navigation */}
      <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid grid-cols-6 mb-4">
          <TabsTrigger value="overview" className="data-[state=active]:bg-blue-100 data-[state=active]:text-blue-900 dark:data-[state=active]:bg-blue-950 dark:data-[state=active]:text-blue-50">
            <BarChart className="h-4 w-4 mr-2" />
            Overview
          </TabsTrigger>
          <TabsTrigger value="accounts" className="data-[state=active]:bg-emerald-100 data-[state=active]:text-emerald-900 dark:data-[state=active]:bg-emerald-950 dark:data-[state=active]:text-emerald-50">
            <Wallet className="h-4 w-4 mr-2" />
            Accounts
          </TabsTrigger>
          <TabsTrigger value="transactions" className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-900 dark:data-[state=active]:bg-amber-950 dark:data-[state=active]:text-amber-50">
            <FileDown className="h-4 w-4 mr-2" />
            Transactions
          </TabsTrigger>
          <TabsTrigger value="transfers" className="data-[state=active]:bg-indigo-100 data-[state=active]:text-indigo-900 dark:data-[state=active]:bg-indigo-950 dark:data-[state=active]:text-indigo-50">
            <ArrowLeftRight className="h-4 w-4 mr-2" />
            Transfers
          </TabsTrigger>
          <TabsTrigger value="goals" className="data-[state=active]:bg-purple-100 data-[state=active]:text-purple-900 dark:data-[state=active]:bg-purple-950 dark:data-[state=active]:text-purple-50">
            <PiggyBank className="h-4 w-4 mr-2" />
            Goals
          </TabsTrigger>
          <TabsTrigger value="recurring" className="data-[state=active]:bg-pink-100 data-[state=active]:text-pink-900 dark:data-[state=active]:bg-pink-950 dark:data-[state=active]:text-pink-50">
            <Calendar className="h-4 w-4 mr-2" />
            Recurring
          </TabsTrigger>
        </TabsList>

        {/* Overview Tab Content */}
        <TabsContent value="overview" className="space-y-6">
          <div className="rounded-lg border-2 border-blue-200 dark:border-blue-900 p-4 bg-gradient-to-r from-blue-50 to-blue-100/50 dark:from-blue-950/50 dark:to-blue-900/30">
            <StatisticsOverview summary={summary} timePeriod={timePeriod} />
          </div>
        </TabsContent>

        {/* Accounts Tab Content */}
        <TabsContent value="accounts" className="space-y-4">
          <div className="rounded-lg border-2 border-emerald-200 dark:border-emerald-900 p-4 bg-gradient-to-r from-emerald-50 to-emerald-100/50 dark:from-emerald-950/50 dark:to-emerald-900/30">
            <h2 className="text-xl font-bold text-emerald-800 dark:text-emerald-300 mb-4">Accounts Summary</h2>
            <p className="text-emerald-700 dark:text-emerald-400 mb-6">Overview of all your financial accounts</p>
            <AccountsList accounts={accounts} refreshAccounts={refreshData} />
          </div>
        </TabsContent>

        {/* Transactions Tab Content */}
        <TabsContent value="transactions" className="space-y-4">
          <div className="rounded-lg border-2 border-amber-200 dark:border-amber-900 p-4 bg-gradient-to-r from-amber-50 to-amber-100/50 dark:from-amber-950/50 dark:to-amber-900/30">
            <h2 className="text-xl font-bold text-amber-800 dark:text-amber-300 mb-4">Transactions History</h2>
            <p className="text-amber-700 dark:text-amber-400 mb-6">All transactions across all your accounts</p>
            <TransactionsCardList 
              transactions={transactions}
              accounts={accounts}
              limit={50}
              showViewAll={false}
            />
          </div>
        </TabsContent>

        {/* Transfers Tab Content */}
        <TabsContent value="transfers" className="space-y-4">
          <div className="rounded-lg border-2 border-indigo-200 dark:border-indigo-900 p-4 bg-gradient-to-r from-indigo-50 to-indigo-100/50 dark:from-indigo-950/50 dark:to-indigo-900/30">
            <h2 className="text-xl font-bold text-indigo-800 dark:text-indigo-300 mb-4">Account Transfers</h2>
            <p className="text-indigo-700 dark:text-indigo-400 mb-6">Move funds between your accounts</p>
            <TransferCardList 
              accounts={accounts}
              onTransferCompleted={refreshData}
            />
          </div>
        </TabsContent>

        {/* Goals Tab Content */}
        <TabsContent value="goals" className="space-y-4">
          <div className="rounded-lg border-2 border-purple-200 dark:border-purple-900 p-4 bg-gradient-to-r from-purple-50 to-purple-100/50 dark:from-purple-950/50 dark:to-purple-900/30">
            <h2 className="text-xl font-bold text-purple-800 dark:text-purple-300 mb-4">Financial Goals</h2>
            <p className="text-purple-700 dark:text-purple-400 mb-6">Track progress on your savings goals</p>
            <GoalsList goals={goals} />
          </div>
        </TabsContent>

        {/* Recurring Transactions Tab Content */}
        <TabsContent value="recurring" className="space-y-4">
          <div className="rounded-lg border-2 border-pink-200 dark:border-pink-900 p-4 bg-gradient-to-r from-pink-50 to-pink-100/50 dark:from-pink-950/50 dark:to-pink-900/30">
            <h2 className="text-xl font-bold text-pink-800 dark:text-pink-300 mb-4">Recurring Transactions</h2>
            <p className="text-pink-700 dark:text-pink-400 mb-6">All your scheduled recurring payments and income</p>
            <RecurringTransactionsList 
              transactions={recurringTransactions}
              accounts={accounts}
              onTransactionUpdated={refreshData}
            />
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
